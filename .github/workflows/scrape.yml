name: Football Predictions Scraper

on:
  schedule:
    - cron: '0 9 * * *'  # Run daily at 09:00 UTC
  workflow_dispatch:  # Allow manual triggering

permissions:
  contents: write
  actions: read

jobs:
  scrape:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install playwright
    
    - name: Install Playwright browsers
      run: |
        playwright install chromium
        playwright install-deps
    
    - name: Create logs directory
      run: mkdir -p logs
    
    - name: Run scraper with retries
      run: |
        attempt=1
        max_attempts=3
        
        while [ $attempt -le $max_attempts ]; do
          echo "Attempt $attempt of $max_attempts"
          
          if timeout 900 python lolopal.py; then
            echo "Scraping successful on attempt $attempt"
            break
          else
            echo "Scraping failed on attempt $attempt"
            
            if [ $attempt -eq $max_attempts ]; then
              echo "All attempts failed. Exiting with failure."
              exit 1
            fi
            
            echo "Waiting 2 minutes before retry..."
            sleep 120
            attempt=$((attempt + 1))
          fi
        done
    
    - name: Check if JSON file has meaningful data
      id: check_data
      run: |
        if [ -f "today_matches.json" ]; then
          file_size=$(stat -c%s "today_matches.json")
          echo "File size: $file_size bytes"
          
          if [ $file_size -gt 2 ]; then
            # Check if JSON contains actual matches (not just empty array)
            match_count=$(python -c "
        import json
        try:
            with open('today_matches.json', 'r') as f:
                data = json.load(f)
                print(len(data) if isinstance(data, list) else 0)
        except:
            print(0)
        ")
            echo "Match count: $match_count"
            
            if [ $match_count -gt 0 ]; then
              echo "has_data=true" >> $GITHUB_OUTPUT
              echo "Found $match_count matches"
            else
              echo "has_data=false" >> $GITHUB_OUTPUT
              echo "No matches found in JSON"
            fi
          else
            echo "has_data=false" >> $GITHUB_OUTPUT
            echo "JSON file too small or empty"
          fi
        else
          echo "has_data=false" >> $GITHUB_OUTPUT
          echo "JSON file not found"
        fi
    
    - name: Append to history log
      if: always()
      run: |
        if [ -f "scrape_log.txt" ]; then
          cat scrape_log.txt >> logs/history.log
          echo "Log appended to history.log"
        fi
    
    - name: Clean up old JSON files
      run: |
        # Keep only the last 7 JSON files (including today's)
        find . -maxdepth 1 -name "*.json" -type f -printf '%T@ %p\n' | \
        sort -rn | \
        tail -n +8 | \
        cut -d' ' -f2- | \
        while read file; do
          echo "Removing old file: $file"
          rm "$file"
        done
    
    - name: Configure Git
      if: steps.check_data.outputs.has_data == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
    
    - name: Commit and push changes
      if: steps.check_data.outputs.has_data == 'true'
      run: |
        # Add files to git
        git add today_matches.json logs/history.log
        
        # Check if there are any changes to commit
        if git diff --staged --quiet; then
          echo "No changes to commit"
          exit 0
        fi
        
        # Get current date for commit message
        current_date=$(date -u +"%Y-%m-%d %H:%M UTC")
        
        # Get match count for commit message
        match_count=$(python -c "
        import json
        try:
            with open('today_matches.json', 'r') as f:
                data = json.load(f)
                print(len(data) if isinstance(data, list) else 0)
        except:
            print(0)
        ")
        
        # Commit and push
        git commit -m "Update football predictions - $current_date ($match_count matches)"
        git push
        
        echo "Successfully committed and pushed changes"
    
    - name: Summary
      if: always()
      run: |
        echo "=== Scraping Summary ==="
        if [ -f "today_matches.json" ]; then
          file_size=$(stat -c%s "today_matches.json")
          match_count=$(python -c "
        import json
        try:
            with open('today_matches.json', 'r') as f:
                data = json.load(f)
                print(len(data) if isinstance(data, list) else 0)
        except:
            print(0)
        ")
          echo "JSON file created: $file_size bytes"
          echo "Matches found: $match_count"
          
          if [ "${{ steps.check_data.outputs.has_data }}" == "true" ]; then
            echo "Data committed to repository"
          else
            echo "No data to commit (empty or invalid JSON)"
          fi
        else
          echo "No JSON file generated"
        fi
        
        if [ -f "scrape_log.txt" ]; then
          echo "Log file created and appended to history"
        fi
        
        echo "=== End Summary ==="
