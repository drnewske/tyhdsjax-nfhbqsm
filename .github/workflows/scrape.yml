name: Daily WindrawWin Scraper

on:
  schedule:
    # Run every day at 06:00 UTC
    - cron: '0 6 * * *'
  
  # Allow manual triggering
  workflow_dispatch:

jobs:
  scrape-and-commit:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libnss3-dev \
          libatk-bridge2.0-dev \
          libdrm2 \
          libxkbcommon-dev \
          libgbm-dev \
          libasound2-dev \
          libatspi2.0-dev \
          libxrandr2 \
          libxcomposite1 \
          libxdamage1 \
          libxss1 \
          libxtst6
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install playwright asyncio
    
    - name: Install Playwright browsers
      run: |
        playwright install chromium
        playwright install-deps chromium
    
    - name: Run scraper
      run: |
        python lolopal.py
    
    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
    
    - name: Check for changes and commit
      run: |
        # Add all files (in case new files are created)
        git add .
        
        # Check if there are any changes
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          # Get current timestamp
          TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M UTC")
          
          # Commit with descriptive message
          git commit -m "ðŸ”„ Update matches data - ${TIMESTAMP}"
          
          # Push changes
          git push
          
          echo "Changes committed and pushed successfully"
        fi
    
    - name: Upload artifacts on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: scraper-logs-${{ github.run_id }}
        path: |
          scrape_log.txt
          today_matches.json
        retention-days: 7
    
    - name: Notify on failure
      if: failure()
      run: |
        echo "::error::Scraper failed to run successfully. Check the logs for details."
